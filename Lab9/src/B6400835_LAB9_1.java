
import java.util.*;

class Graphs<T> {

    // We use Hashmap to store the edges in the graph
    private Map<T, List<T>> map = new HashMap<>();

    // This function adds a new vertex to the graph
    // LinkedList à¸—à¸µà¹ˆà¸ªà¸²à¸¡à¸²à¸£à¸–à¸Šà¸µà¹‰à¹„à¸›à¸¢à¸±à¸‡à¸•à¸³à¹?à¸«à¸™à¹ˆà¸‡à¸•à¹ˆà¸²à¸‡ à¹† à¸‚à¸­à¸‡ ArrayList
    // map.put à¹€à¸žà¸´à¹ˆà¸¡à¸‚à¹‰à¸­à¸¡à¸¹à¸¥à¹€à¸‚à¹‰à¸²à¹„à¸›à¸¢à¸±à¸‡ Map à¹‚à¸”à¸¢à¸¡à¸µà¸žà¸²à¸£à¸²à¸¡à¸´à¹€à¸•à¸­à¸£à¹Œà¹?à¸£à¸?à¹€à¸›à¹‡à¸™ Key
    // à¹?à¸¥à¸°à¸žà¸²à¸£à¸²à¸¡à¸´à¹€à¸•à¸­à¸£à¹Œà¸—à¸µà¹ˆà¸ªà¸­à¸‡à¹€à¸›à¹‡à¸™ Value à¸•à¸²à¸¡à¸¥à¸³à¸”à¸±à¸š
    public void addVertex(T s) {
        map.put(s, new LinkedList<T>());
    }

    // This function adds the edge
    // between source to destination
    // à¹?à¸«à¸¥à¹ˆà¸‡à¸—à¸µà¹ˆà¸¡à¸²,à¸›à¸¥à¸²à¸¢à¸—à¸²à¸‡,à¹?à¸šà¸šà¸ªà¸­à¸‡à¸—à¸´à¸¨à¸—à¸²à¸‡
    // containsKey à¹ƒà¸Šà¹‰à¸•à¸£à¸§à¸ˆà¸ªà¸­à¸šà¸§à¹ˆà¸²à¸¡à¸µ key à¸—à¸µà¹ˆà¸?à¸³à¸«à¸™à¸”à¸­à¸¢à¸¹à¹ˆà¹ƒà¸™ Map
    public void addEdge(T source, T destination, boolean bidirectional) {

        if (!map.containsKey(source))
            addVertex(source);

        if (!map.containsKey(destination))
            addVertex(destination);

        map.get(source).add(destination);
        if (bidirectional == true) {
            map.get(destination).add(source);
        }
    }

    // This function gives the count of vertices
    public void getVertexCount() {
        // TODO: (2.1) à¹€à¸žà¸´à¹ˆà¸¡à¹‚à¸„à¹‰à¸”à¹€à¸žà¸·à¹ˆà¸­à¹?à¸ªà¸”à¸‡à¸ˆà¸³à¸™à¸§à¸™ Vertex à¸­à¸­à¸?à¸—à¸²à¸‡à¸ˆà¸­à¸ à¸²à¸ž
        // e.g. à¸?à¸£à¸“à¸µà¸¡à¸µà¸?à¸²à¸£à¸ªà¸­à¸šà¸–à¸²à¸¡à¸§à¹ˆà¸²à¹ƒà¸™à¸?à¸£à¸²à¸Ÿà¸¡à¸µà¸ˆà¸³à¸™à¸§à¸™ vertex à¸—à¸±à¹‰à¸‡à¸«à¸¡à¸”à¹€à¸—à¹ˆà¸²à¹„à¸£ à¸”à¹‰à¸§à¸¢
        // getVertexCount()
        // à¸«à¸²à¸?à¸?à¸£à¸²à¸Ÿà¸¡à¸µ 1 vertex à¸ˆà¸°à¸•à¹‰à¸­à¸‡à¹?à¸ªà¸”à¸‡à¸‚à¹‰à¸­à¸„à¸§à¸²à¸¡à¸§à¹ˆà¸² "The graph has 1 vertex."
        // à¸«à¸²à¸?à¸?à¸£à¸²à¸Ÿà¸¡à¸µ 5 vertices (vertexcount>1) à¸ˆà¸°à¸•à¹‰à¸­à¸‡à¹?à¸ªà¸”à¸‡à¸‚à¹‰à¸­à¸„à¸§à¸²à¸¡à¸§à¹ˆà¸² "The graph has 5
        // vertices."
        if (map.size() == 1) {
            System.out.println("The graph has 1 vertex.");
        } else {
            System.out.println("The graph has " + map.size() + " vertices.");
        }
    }

    // This function gives the count of edges
    public void getEdgesCount(boolean bidirection) {
        int count = 0;
        for (T v : map.keySet()) {
            count += map.get(v).size();
        }
        if (bidirection == true) {
            count = count / 2;
        }
        // TODO: (2.2) à¹€à¸žà¸´à¹ˆà¸¡à¹‚à¸„à¹‰à¸”à¹€à¸žà¸·à¹ˆà¸­à¹?à¸ªà¸”à¸‡à¸ˆà¸³à¸™à¸§à¸™ edges à¸­à¸­à¸?à¸—à¸²à¸‡à¸ˆà¸­à¸ à¸²à¸ž
        // e.g. à¸?à¸£à¸“à¸µà¸¡à¸µà¸?à¸²à¸£à¸ªà¸­à¸šà¸–à¸²à¸¡à¸§à¹ˆà¸²à¹ƒà¸™à¸?à¸£à¸²à¸Ÿà¸¡à¸µà¸ˆà¸³à¸™à¸§à¸™ edges à¸—à¸±à¹‰à¸‡à¸«à¸¡à¸”à¹€à¸—à¹ˆà¸²à¹„à¸£ à¸”à¹‰à¸§à¸¢
        // getEdgesCount(true)
        // à¸ˆà¸°à¸™à¸±à¸šà¹€à¸ªà¹‰à¸™à¹€à¸Šà¸·à¹ˆà¸­à¸¡à¹?à¸šà¸š bidirectional (à¸–à¸¹à¸?à¸?à¸³à¸«à¸™à¸”à¸ˆà¸²à¸? parameter "bidirection=true")
        // à¸«à¸²à¸?à¸?à¸£à¸²à¸Ÿà¸¡à¸µ 1 edge à¸ˆà¸°à¸•à¹‰à¸­à¸‡à¹?à¸ªà¸”à¸‡à¸‚à¹‰à¸­à¸„à¸§à¸²à¸¡à¸§à¹ˆà¸² "The graph has 1 edge."
        // à¸«à¸²à¸?à¸?à¸£à¸²à¸Ÿà¸¡à¸µ 7 edges (edgecount>1) à¸ˆà¸°à¸•à¹‰à¸­à¸‡à¹?à¸ªà¸”à¸‡à¸‚à¹‰à¸­à¸„à¸§à¸²à¸¡à¸§à¹ˆà¸² "The graph has 7 edges."
        if (count == 1) {
            System.out.println("The graph has 1 edge.");
        } else {
            System.out.println("The graph has " + count + " edges.");
        }
    }

    // This function gives whether
    // a vertex is present or not.
    public void hasVertex(T s) {
        if (map.containsKey(s)) {
            System.out.println("The graph contains " + s + " as a vertex.");
        } else {
            // TODO: (2.4) à¹€à¸žà¸´à¹ˆà¸¡à¹‚à¸„à¹‰à¸”à¹€à¸žà¸·à¹ˆà¸­à¹?à¸ªà¸”à¸‡à¸„à¹ˆà¸²à¸?à¸£à¸“à¸µà¸—à¸µà¹ˆà¹ƒà¸™à¸?à¸£à¸²à¸Ÿà¹„à¸¡à¹ˆà¸¡à¸µ Vertex s à¸—à¸µà¹ˆà¸ªà¹ˆà¸‡à¹€à¸‚à¹‰à¸²à¸¡à¸²
            // e.g. à¸?à¸£à¸“à¸µà¸¡à¸µà¸?à¸²à¸£à¸ªà¸­à¸šà¸–à¸²à¸¡à¸§à¹ˆà¸²à¸¡à¸µ vertex 5 à¸«à¸£à¸·à¸­à¹„à¸¡à¹ˆà¸”à¹‰à¸§à¸¢ hasVertex(5)
            // à¸«à¸²à¸? vertex à¸™à¸±à¹‰à¸™à¹„à¸¡à¹ˆà¸¡à¸µ à¸ˆà¸°à¸•à¹‰à¸­à¸‡à¹?à¸ªà¸”à¸‡à¸‚à¹‰à¸­à¸„à¸§à¸²à¸¡à¸§à¹ˆà¸² "The graph does not contain 5 as a
            // vertex."
            System.out.println("The graph does not contains " + s + " as a vertex.");
        }
    }

    // This function gives whether an edge is present or not.
    public void hasEdge(T s, T d) {
        if (map.get(s).contains(d)) {
            // TODO: (2.3) à¹€à¸žà¸´à¹ˆà¸¡à¹‚à¸„à¹‰à¸”à¹€à¸žà¸·à¹ˆà¸­à¹?à¸ªà¸”à¸‡à¸„à¹ˆà¸²à¸?à¸£à¸“à¸µà¸—à¸µà¹ˆà¸¡à¸µà¹€à¸ªà¹‰à¸™à¹€à¸Šà¸·à¹ˆà¸­à¸¡à¸£à¸°à¸«à¸§à¹ˆà¸²à¸‡ Vertex
            // e.g. à¸?à¸£à¸“à¸µà¸¡à¸µà¸?à¸²à¸£à¸ªà¸­à¸šà¸–à¸²à¸¡à¸§à¹ˆà¸²à¸¡à¸µà¹€à¸ªà¹‰à¸™à¹€à¸Šà¸·à¹ˆà¸­à¸¡ (3,4) à¸«à¸£à¸·à¸­à¹„à¸¡à¹ˆà¸”à¹‰à¸§à¸¢ hasEdge(3,4)
            // à¸«à¸²à¸?à¹€à¸ªà¹‰à¸™à¹€à¸Šà¸·à¹ˆà¸­à¸¡à¸™à¸±à¹‰à¸™à¹„à¸¡à¹ˆà¸¡à¸µ à¸ˆà¸°à¸•à¹‰à¸­à¸‡à¹?à¸ªà¸”à¸‡à¸‚à¹‰à¸­à¸„à¸§à¸²à¸¡à¸§à¹ˆà¸² "The graph has an edge between
            // vertex 3 and 4."
            System.out.println("The graph has an edge between vertex 3 and 4.");
        } else {
            System.out.println("The graph has no edge between " + s + " and " + d + ".");
        }
    }

    // Prints the adjancency list of each vertex.
    @Override
    public String toString() {
        StringBuilder builder = new StringBuilder();

        for (T v : map.keySet()) {
            builder.append(v.toString() + ": ");
            for (T w : map.get(v)) {
                builder.append(w.toString() + " ");
            }
            builder.append("\n");
        }

        return (builder.toString());
    }
}

public class B6400835_LAB9_1 {
    public static void main(String args[]) {

        // Object of graph is created.
        Graphs<Integer> g = new Graphs<Integer>();

        // edges are added.
        // Since the graph is bidirectional,
        // so boolean bidirectional is passed as true.
        // TODO: (1) setup graph detail
        g.addEdge(0, 1, true);
        g.addEdge(0, 4, true);
        g.addEdge(1, 2, true);
        g.addEdge(1, 3, true);
        g.addEdge(1, 4, true);
        g.addEdge(2, 3, true);
        g.addEdge(3, 4, true);

        // à¹?à¸ªà¸”à¸‡à¸„à¹ˆà¸²à¹ƒà¸™à¸?à¸£à¸²à¸Ÿà¸­à¸­à¸?à¸¡à¸² à¹‚à¸”à¸¢à¹?à¸ªà¸”à¸‡ Vertex à¸«à¸¥à¸±à¸? à¸•à¸²à¸¡à¸”à¹‰à¸§à¸¢ Vertex à¸—à¸µà¹ˆà¹€à¸Šà¸·à¹ˆà¸­à¸¡à¸•à¹ˆà¸­à¸ˆà¸²à¸? Vertex
        // à¸«à¸¥à¸±à¸?
        System.out.println("Graph : ");
        System.out.println(g.toString());
        // (2.1) gives the no of vertices in the graph.
        g.getVertexCount();

        // (2.2) gives the no of edges in the graph.
        g.getEdgesCount(true);

        // (2.3) tells whether the edge is present or not.
        g.hasEdge(3, 4);

        // (2.4) à¹€à¸£à¸µà¸¢à¸?à¹ƒà¸Šà¹‰ hasVertex à¹‚à¸”à¸¢à¸ªà¹ˆà¸‡à¸„à¹ˆà¸² 5 à¹„à¸› (à¸•à¸£à¸§à¸ˆà¸ªà¸­à¸šà¸§à¹ˆà¸²à¸¡à¸µ Vertex à¸«à¸¡à¸²à¸¢à¹€à¸¥à¸‚ 5
        // à¸«à¸£à¸·à¸­à¹„à¸¡à¹ˆ)
        g.hasVertex(5);
    }

}
